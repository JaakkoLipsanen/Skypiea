using Flai;
using Flai.Achievements;
using Flai.CBES;
using Skypiea.Messages;
using Skypiea.Model.Boosters;

namespace Skypiea.Achievements.Trackers
{
    public class KillWithInvulnerabilityBoosterTracker : CbesSingleAchievementTracker
    {
        private readonly int _targetKills;
        private readonly IBoosterState _boosterState;
        private int _currentKills = 0;

        public KillWithInvulnerabilityBoosterTracker(AchievementManager achievementManager, EntityWorld entityWorld, string achievementName, int count) 
            : base(achievementManager, entityWorld, achievementName)
        {
            Ensure.Is<BooleanProgression>(_achievement.Progression);
            _targetKills = count;
            _boosterState = entityWorld.Services.Get<IBoosterState>();

            if (!_achievement.IsUnlocked)
            {
                entityWorld.SubscribeToMessage<ZombieKilledMessage>(this.OnZombieKilled);
            }
        }

        public override void Update(UpdateContext updateContext)
        {
            if (!_achievement.IsUnlocked)
            {
                return;
            }

            if (_currentKills > 0 && !_boosterState.IsActive<PlayerInvulnerabilityBooster>())
            {
                _currentKills = 0;
            }
        }

        private void OnZombieKilled(ZombieKilledMessage message)
        {
            if (_boosterState.IsActive<PlayerInvulnerabilityBooster>())
            {
                _currentKills++;
                if (_currentKills >= _targetKills)
                {
                    _achievement.Progression.Cast<BooleanProgression>().Unlock();
                    _entityWorld.UnsubscribeToMessage<ZombieKilledMessage>(this.OnZombieKilled);
                }
            }
        }
    }
}
